{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ameer Khan\\\\Documents\\\\Node-apps\\\\Node-chat-app\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar connectionOptions = {\n  \"force new connection\": true,\n  \"reconnectionAttempts\": \"Infinity\",\n  \"timeout\": 10000,\n  \"transports\": [\"websocket\"]\n};\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessege] = useState('');\n  const [messages, setMesseges] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT, connectionOptions);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, ({\n      error\n    }) => {\n      alert(error);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chat\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"QNqExyxvmWlN9Tk+U/I4Y8/ci9o=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/Ameer Khan/Documents/Node-apps/Node-chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","connectionOptions","socket","Chat","location","name","setName","room","setRoom","message","setMessege","messages","setMesseges","ENDPOINT","parse","search","emit","error","alert","off","on","setMessages"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,IAAIC,iBAAiB,GAAI;AACrB,0BAAyB,IADJ;AAErB,0BAAwB,UAFH;AAGrB,aAAY,KAHS;AAIrB,gBAAe,CAAC,WAAD;AAJM,CAAzB;AAOA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMgB,QAAQ,GAAG,gBAAjB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACO,MAAAA,IAAD;AAAQE,MAAAA;AAAR,QAAgBR,WAAW,CAACe,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAtB;AAEAb,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,EAAUZ,iBAAV,CAAX;AAEAK,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAAEX,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,CAAC;AAACU,MAAAA;AAAD,KAAD,KAAa;AAC7CC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH,KAFD;AAIA,WAAO,MAAM;AACTf,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AAEAd,MAAAA,MAAM,CAACiB,GAAP;AACH,KAJD;AAKH,GAjBQ,EAiBN,CAACN,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAjBM,CAAT;AAoBAjB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAsBX,OAAD,IAAY;AAC7BY,MAAAA,WAAW,CAAC,CAAC,GAAGV,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,CAAT;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CArCD;;GAAMN,I;;KAAAA,I;AAuCN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\n\r\nvar connectionOptions =  {\r\n    \"force new connection\" : true,\r\n    \"reconnectionAttempts\": \"Infinity\", \r\n    \"timeout\" : 10000,                  \r\n    \"transports\" : [\"websocket\"]\r\n};\r\n\r\nlet socket;\r\n\r\nconst Chat = ({ location}) => {\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessege] = useState('');\r\n    const [messages, setMesseges] = useState([]);\r\n    const ENDPOINT = 'localhost:5000'\r\n\r\n    useEffect(() => {\r\n        const {name , room} = queryString.parse(location.search);\r\n\r\n        socket = io(ENDPOINT,connectionOptions);\r\n\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', { name, room } ,({error}) => {\r\n            alert(error);\r\n        });\r\n\r\n        return () => {\r\n            socket.emit('disconnect');\r\n\r\n            socket.off();\r\n        }\r\n    }, [ENDPOINT, location.search]);\r\n\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (message) =>{\r\n            setMessages([...messages, message]);\r\n        })\r\n    }, )\r\n\r\n    return (\r\n        <h1>Chat</h1>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}